head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2024.08.06.22.13.07;	author felipe.farias;	state Exp;
branches;
next	;


desc
@programa de testes para a funcao DecodificarBase32
@


1.1
log
@Initial revision
@
text
@/*******************************************************************************
 *
 * Universidade Federal do Rio de Janeiro
 * Escola Politecnica
 * Departamento de Eletronica e de Computacao
 * EEL270 - Computacao II - Turma 2024/1
 * Prof. Marcelo Luiz Drumond Lanza
 * Autor: Felipe Vasconcellos Nunes Gurgel Farias
 *
 * Descricao: Programa de testes da funcao DecodificarBase32
 *
 * $Author$
 * $Date$
 * $Log$
 *
 *******************************************************************************/
#ifdef __linux__
#define _XOPEN_SOURCE	600
#endif

#if defined (__FreeBSD__) && defined (__STRICT_ANSI__)
#define __LONG_LONG_SUPPORTED
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "aula0801.h"
#include "cores.h"

#define NUMERO_ARGUMENTOS_DECODIFICAR_BYTES	3

#define OK					0
#define NUMERO_ARGUMENTOS_INVALIDO		1
#define ALFABETO_NEGATIVO			2
#define CARACTER_ESPECIAL_ALFABETO_INVALIDO	3
#define DIGITO_ALFABETO_INVALIDO		4
#define COMPRIMENTO_STRING_INVALIDO		5
#define ERRO_ALOCACAO_MEMORIA			6		

#define END_OF_STRING				'\0'

int
main (int argc, char **argv)
{

	ull numeroBytes, comprimentoString;
	byte *saidaBase32;
	tipoAlfabetoBase32 tipoAlfabetoEntrada;
	char *entradaByte, *validacao, *stringCodificada;
	us contadorPacoteDecodificado, tamanhoPacoteDecodificado;
	tipoErros pacoteDecodificado, pacoteBase16;

	if (argc != NUMERO_ARGUMENTOS_DECODIFICAR_BYTES)
	{
		printf ("\n%sERRO: numero de argumentos invalido! Uso: <tipoAlfabeto> <stringBase32>%s\n\n", RED, RESET);
		exit (NUMERO_ARGUMENTOS_INVALIDO);
	}

	if (argv[1][0] == '-')
	{
		printf ("\n%sERRO: O alfabeto esta negativo. Digite apenas o inteiro 0 (basico) ou 1 (estendido)!%s\n\n", RED, RESET);
		exit (ALFABETO_NEGATIVO);
	}



	tipoAlfabetoEntrada = (tipoAlfabetoBase32)strtoul(argv[1], &validacao, 10);
	
	if(*validacao != END_OF_STRING)
	{
		printf ("\n%sERRO: Caracteres especiais sao invalidos. Retire o \'%c\' do argumento do tipo do alfabeto!%s\n\n", RED, *validacao, RESET);
		exit (CARACTER_ESPECIAL_ALFABETO_INVALIDO);
	}

	if(tipoAlfabetoEntrada != basico && tipoAlfabetoEntrada != estendido)
	{
		printf ("\n%sERRO: Primeiro argumento destinado ao tipo do alfabeto invalido. Digite apenas o inteiro 0 (basico) ou 1 (estendido)!%s\n\n", RED, RESET);
		exit (DIGITO_ALFABETO_INVALIDO);
	}


	entradaByte = argv[2];

	comprimentoString = strlen(entradaByte);

	if(comprimentoString % 8 != 0)
	{

		printf ("\n%sERRO: Segundo argumento destinado a string invalido. O comprimento da string deve ser multiplo de 8!%s\n\n", RED, RESET);
		exit (COMPRIMENTO_STRING_INVALIDO);
	
	}


	saidaBase32 = (byte *)malloc((comprimentoString * 5 / 8) * sizeof(byte));


	if (!saidaBase32)
	{
		printf ("\n%sERRO: Falha de alocacao de memoria!\n\n%s", RED, RESET);
		exit (ERRO_ALOCACAO_MEMORIA);
	}


	pacoteDecodificado = DecodificarBase32(entradaByte, tipoAlfabetoEntrada, saidaBase32, &numeroBytes);

	if(pacoteDecodificado != sucesso)
	{

		free(saidaBase32);
		switch (pacoteDecodificado)
		{

			case entradaByteInvalida:
			printf("\n%sERRO: Entrada invalida!%s\n\n", RED, RESET);
			break;

			case saidaPacoteInvalido:
			printf("\n%sERRO: Saida invalida!%s\n\n", RED, RESET);
			break;

			case comprimentoInvalido:
			printf("\n%sERRO: Comprimento invalido!%s\n\n", RED, RESET);
			break;

			case entradaNaoParInvalido:
			printf("\n%sERRO: Comprimento da string invalido!%s\n\n", RED, RESET);
			break;

			case baseInvalida:
			printf("\n%sERRO: Falha ao gerar a codificacao!%s\n\n", RED, RESET);
			break;
	
			default:
			printf("\n%sERRO: Falha ao gerar a codificacao!%s", RED, RESET);
			break;

		}

		exit(pacoteDecodificado);

	}	

	stringCodificada = (char *)malloc((numeroBytes * 2 + 1) * sizeof(char));

	if (!stringCodificada)
	{

		printf("\n%sERRO: Falha de alocacao de memoria!%s\n\n", RED, RESET);
		free(saidaBase32);
		exit(ERRO_ALOCACAO_MEMORIA);

	}


	pacoteBase16 = CodificarBase16(saidaBase32, numeroBytes, stringCodificada);

	if (pacoteBase16 != sucesso)
	{

		free(saidaBase32);
		free(stringCodificada);
		switch (pacoteBase16)
		{

			case entradaByteInvalida:
			printf("\n%sERRO: Entrada invalida!%s\n\n", RED, RESET);
			break;

			case saidaPacoteInvalido:
			printf("\n%sERRO: Saida invalida!%s\n\n", RED, RESET);
			break;

			default:
			printf("\n%sERRO: Falha ao gerar a codificacao!%s\n\n", RED, RESET);
			break;
			

		}
		
		exit(pacoteBase16);
	}

	tamanhoPacoteDecodificado = strlen(stringCodificada);

	printf("\n%s%s>>>>>%s %s", BOLD_BLACK, WHITE_BACKGROUND, RESET, GREEN);

	for (contadorPacoteDecodificado = 0; contadorPacoteDecodificado < tamanhoPacoteDecodificado; contadorPacoteDecodificado += 2)
	{

		printf("%c%c", stringCodificada[contadorPacoteDecodificado], stringCodificada[contadorPacoteDecodificado + 1]);
		
		if (contadorPacoteDecodificado + 2 < tamanhoPacoteDecodificado)
		{
		
			printf(" ");

		}	
	

	}
	printf("%s\n\n", RESET);

	free(saidaBase32);
	free(stringCodificada);
	
	return OK;

}
/* $RCSfile$ */
@
