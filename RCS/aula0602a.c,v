head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2024.07.19.20.03.38;	author felipe.farias;	state Exp;
branches;
next	1.2;

1.2
date	2024.06.24.04.01.35;	author felipe.farias;	state Exp;
branches;
next	1.1;

1.1
date	2024.06.24.03.19.14;	author felipe.farias;	state Exp;
branches;
next	;


desc
@Programa de testes GerarDigitosVerificadores
@


1.3
log
@correcao do programa de testes
@
text
@/*******************************************************************************
 *
 * Universidade Federal do Rio de Janeiro
 * Escola Politecnica
 * Departamento de Eletronica e de Computacao
 * EEL270 - Computacao II - Turma 2024/1
 * Prof. Marcelo Luiz Drumond Lanza
 * Autor: Felipe Vasconcellos Nunes Gurgel Farias
 *
 * Descricao: Programa de testes da funcao GerarDigitosVerificadoresRg
 *
 * $Author: felipe.farias $
 * $Date: 2024/06/24 04:01:35 $
 * $Log: aula0602a.c,v $
 * Revision 1.2  2024/06/24 04:01:35  felipe.farias
 * correcao
 *
 * Revision 1.1  2024/06/24 03:19:14  felipe.farias
 * Initial revision
 *
 *
 *******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "cores.h"
#include "aula0601.h"

#define NUMERO_ARGUMENTOS_GERAR_RG		COMPRIMENTO_RG + 1
#define NUMERO_ARGUMENTOS_INVALIDO		1

#define OK					0
#define CARACTER_INVALIDO			2
#define ARGUMENTO_SEM_UNICO_DIGITO		3
#define ERRO_GERAR_FUNCAO_RG			4

#define END_OF_STRING				'\0'

int main(int argc, char **argv)

{
	byte numeroRg[COMPRIMENTO_RG + DIGITO_VERIFICADOR];
	us contadorArgumentoTerminal, digitoRg;
	char *validacao;
	tipoErros resultadoRg;

	if (argc != NUMERO_ARGUMENTOS_GERAR_RG)
	{
		printf("\n%sERRO: Numero de digitos do RG invalido! Considerando 'd' = 'digito', uso: <d1> <d2> ... <d7> <d8>%s\n\n", RED, RESET);
		exit(NUMERO_ARGUMENTOS_INVALIDO);
	}

	for (contadorArgumentoTerminal = 1; contadorArgumentoTerminal <= COMPRIMENTO_RG; contadorArgumentoTerminal++)
	{
		if (strlen(argv[contadorArgumentoTerminal]) != 1)
		{
			printf("%s\nERRO: Argumento '%s' do %uo digito do RG tem mais de um termo! Uso: <0 a 9>! %s\n\n", RED, argv[contadorArgumentoTerminal], contadorArgumentoTerminal, RESET);
			exit(ARGUMENTO_SEM_UNICO_DIGITO);
		}

		digitoRg = strtoul(argv[contadorArgumentoTerminal], &validacao, 10);

		if(*validacao != END_OF_STRING)
		{
			printf("%s\nERRO: Caracter especial invalido \'%c\' identificado no %uo digito do RG. Retire-o! %s\n\n", RED, *validacao, contadorArgumentoTerminal, RESET);
			exit(CARACTER_INVALIDO);
		}
		
		numeroRg[contadorArgumentoTerminal - 1] = (byte) (digitoRg + '0');
	}

	resultadoRg = GerarDigitosVerificadoresRg(numeroRg);

	if(resultadoRg != sucesso)
	{
		printf("\n%sERRO: Falha ao executar a funcao geradora do RG (erro numero: %u)!%s\n\n", RED, resultadoRg, RESET);
		exit(ERRO_GERAR_FUNCAO_RG);
	}

	printf("\n%sRG: %s%c%c.%c%c%c.%c%c%c-%c\n\n", GREEN, RESET, numeroRg[0], numeroRg[1], numeroRg[2], numeroRg[3], numeroRg[4], numeroRg[5], numeroRg[6], numeroRg[7], numeroRg[8]);

	return OK;

}

/* $RCSfile: aula0602a.c,v $ */
@


1.2
log
@correcao
@
text
@d13 1
a13 1
 * $Date: 2024/06/24 03:19:14 $
d15 3
d30 1
a30 1
#define NUMERO_ARGUMENTOS			COMPRIMENTO_RG
d34 5
a38 3
#define COMPRIMENTO_RG_INVALIDO			2
#define ERRO_RETORNO_FUNCAO_RG			3
#define CARACTER_INVALIDO			4
d43 3
a45 1
	byte numeroRg[COMPRIMENTO_RG];
a46 1
	us contador;
d48 1
a48 1
	if(argc != NUMERO_ARGUMENTOS)
d50 1
a50 1
		printf("\n%sERRO: Digitos do RG invalido! \nUso:%s <digito1> <digito2> ... <digito7> <digito8>%s\n\n", RED, argv[0], RESET);
d54 1
a54 1
	for(contador = 1; contador < argc; contador++)
d56 1
a56 1
		if(strlen(argv[contador]) != 1)
d58 3
a60 2
			printf("\n%sERRO: Comprimento do argumento %u do RG excedido!%s\n\n", RED, contador, RESET);
			exit(COMPRIMENTO_RG_INVALIDO);
d62 6
d69 2
a70 1
		numeroRg[contador - 1] = argv[contador][0] - '0';
d72 1
a72 1
	
d74 1
d78 1
a78 1
		exit(ERRO_RETORNO_FUNCAO_RG);
d81 2
a82 15
	printf("\n%sRG: %s", GREEN, RESET);
	for(contador = 0; contador < COMPRIMENTO_RG - 1; contador++)
	{
		printf("%s", argv[contador + 1]);
		if(contador == 1)
		{
			printf(".");
		}
		
		if(contador == 4)
		{
			printf(".");
		}
	}
	printf("-%u%s\n\n", numeroRg[COMPRIMENTO_RG - 1], RESET);
d84 1
d86 1
@


1.1
log
@Initial revision
@
text
@d12 6
a17 3
 * $Author$
 * $Date$
 * $Log$
a34 2
#define END_OF_STRING				

d83 1
a83 1
/* $RCSfile$ */
@
